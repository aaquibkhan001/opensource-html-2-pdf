package io.github.aaquibkhan.conversion;

import io.github.aaquibkhan.model.ConversionRequestModel;
import io.github.aaquibkhan.utils.Constants;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.io.UnsupportedEncodingException;

/**
 * @author aaquibkhan001
 * @version 1.0
 * @since 1.0 (Created Oct. 02, 2023)
 */


@ExtendWith(SpringExtension.class)
public class HtmlConversionServiceImplTest {

	@InjectMocks
	HtmlConversionServiceImpl htmlConversionService;

	@Test
	public void test_conversion_withInvalidHtml() throws UnsupportedEncodingException {
		ConversionRequestModel conversionRequestModel = ConversionRequestModel.builder().htmlContent("ljljlj").build();

		String result = htmlConversionService.convertHtmlToPdf(conversionRequestModel);

		assert result.equals(Constants.INVALID_HTML_INPUT);
	}

	@Test
	public void test_conversion_withEmptyHtml() throws UnsupportedEncodingException {
		ConversionRequestModel conversionRequestModel = ConversionRequestModel.builder().htmlContent("").build();

		String result = htmlConversionService.convertHtmlToPdf(conversionRequestModel);

		assert result.equals(Constants.INVALID_HTML_INPUT);
	}

	@Test
	public void test_conversion_witValidHtml() throws UnsupportedEncodingException {
		String encodedHtml = "";
		ConversionRequestModel conversionRequestModel = ConversionRequestModel.builder().htmlContent(encodedHtml)
				.build();

		String result = htmlConversionService.convertHtmlToPdf(conversionRequestModel);

		assert !result.isEmpty();
	}
}
